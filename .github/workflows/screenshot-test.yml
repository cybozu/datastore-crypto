name: Screenshot Test

on:
  push:
    branches:
      - main
    paths-ignore:
      - '**.md'
      - '**/.gitignore'
      - '**/.editorconfig'
      - 'docs/**'
  pull_request:
    paths-ignore:
      - '**.md'
      - '**/.gitignore'
      - '**/.editorconfig'
      - 'docs/**'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  REFERENCE_SCREENSHOTS_ARTIFACT_NAME: reference-screenshots

jobs:
  # デフォルトブランチへのプッシュ時に正解画像を記録するジョブ
  record_reference_screenshots_on_default_branch:
    name: Record reference screenshots on default branch
    runs-on: ubuntu-latest
    timeout-minutes: 60
    if: github.event_name == 'push'

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Record reference screenshots
        uses: ./.github/actions/record-reference-screenshots
        with:
          artifact-name: ${{ env.REFERENCE_SCREENSHOTS_ARTIFACT_NAME }}

  search_reference_screenshots:
    name: Search reference screenshots
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    outputs:
      found: ${{ steps.find_artifacts.outputs.found }}
      run_id: ${{ steps.find_artifacts.outputs.run_id }}

    steps:
      - name: Checkout for scripts
        uses: actions/checkout@v4

      - name: Find latest successful default branch workflow run with artifacts
        id: find_artifacts
        env:
          GH_TOKEN: ${{ github.token }}
          GITHUB_REPOSITORY: ${{ github.repository }}
          GITHUB_REPOSITORY_DEFAULT_BRANCH: ${{ github.event.repository.default_branch }}
        run: |
          chmod +x .github/scripts/find_reference_screenshots.sh
          ./.github/scripts/find_reference_screenshots.sh "Screenshot Test" "$REFERENCE_SCREENSHOTS_ARTIFACT_NAME"

  # PR時に新しい正解画像を記録するジョブ
  # デフォルトブランチで保存したものが見つからない場合に実行する
  record_reference_screenshots_on_pr:
    name: Record reference screenshots on PR
    runs-on: ubuntu-latest
    timeout-minutes: 60
    needs: search_reference_screenshots
    if: github.event_name == 'pull_request' && needs.search_reference_screenshots.outputs.found == 'false'
    outputs:
      reference_run_id: ${{ github.run_id }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Checkout base branch for PR
        run: git checkout ${{ github.base_ref }}

      - name: Record reference screenshots
        uses: ./.github/actions/record-reference-screenshots
        with:
          artifact-name: ${{ env.REFERENCE_SCREENSHOTS_ARTIFACT_NAME }}

  verify_screenshots:
    name: Verify screenshots
    runs-on: ubuntu-latest
    timeout-minutes: 60
    if: ${{ github.event_name == 'pull_request' && !failure() }}
    needs: [ search_reference_screenshots, record_reference_screenshots_on_pr ]
    steps:
      - uses: actions/checkout@v4

      - uses: ./.github/actions/setup-java

      - uses: gradle/actions/setup-gradle@v4
        with:
          cache-read-only: false # PRのブランチでもキャッシュを作成する

      - name: Download reference screenshots
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.REFERENCE_SCREENSHOTS_ARTIFACT_NAME }}
          run-id: ${{ needs.search_reference_screenshots.outputs.found == 'true' && needs.search_reference_screenshots.outputs.run_id || needs.record_reference_screenshots_on_pr.outputs.reference_run_id }}
          github-token: ${{ secrets.GITHUB_TOKEN }}
          path: reference-screenshots

      - name: Copy reference screenshots to roborazzi folder
        run: |
          find reference-screenshots -type f -name "*.png" | while read -r file; do
            # 元のパス構造を維持してコピー先を決定
            relative_path=${file#reference-screenshots/}
            target_dir=$(dirname "$relative_path")
          
            mkdir -p "$target_dir"
            cp "$file" "$relative_path"
          done

      - name: Verify screenshots
        run: ./gradlew verifyRoborazziDebug --tests "com.github.takahirom.roborazzi*"

      - name: Upload screenshot test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: screenshot-test-reports
          retention-days: 30
          path: |
            ./**/build/reports/roborazzi
            ./**/build/outputs/roborazzi

  # 以下を参考に実装
  # https://github.com/takahirom/roborazzi-compare-on-github-comment-sample
  comment_diff:
    name: Comment screenshot diffs on pull request
    runs-on: ubuntu-latest
    needs: verify_screenshots
    if: ${{ failure() && github.event_name == 'pull_request' }}
    env:
      COMPANION_BRANCH_NAME: companion/${{ github.head_ref }}

    steps:
      - name: Default branch checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.repository.default_branch }}

      - name: switch companion branch
        run: |
          # orphan means it will create no history branch
          git branch -D "$COMPANION_BRANCH_NAME" || true
          git checkout --orphan "$COMPANION_BRANCH_NAME"
          git rm -rf .

      - uses: actions/download-artifact@v4
        with:
          name: screenshot-test-reports

      - name: Check if there are valid files
        id: check-if-there-are-valid-files
        shell: bash
        run: |
          # Find all the files ending with _compare.png
          mapfile -t files_to_add < <(find . -type f -name "*_compare.png")
          
          # Check for invalid file names and add only valid ones
          exist_valid_files="false"
          for file in "${files_to_add[@]}"; do
            if [[ $file =~ ^[a-zA-Z0-9_./-]+$ ]]; then
              exist_valid_files="true"
              break
            fi
          done
          echo "exist_valid_files=$exist_valid_files" >> "$GITHUB_OUTPUT"

      - name: Push screenshot diff
        shell: bash
        if: steps.check-if-there-are-valid-files.outputs.exist_valid_files == 'true'
        run: |
          # Find all the files ending with _compare.png
          files_to_add=$(find . -type f -name "*_compare.png")
          
          # Check for invalid file names and add only valid ones
          for file in $files_to_add; do
            if [[ "$file" =~ ^[a-zA-Z0-9_./-]+$ ]]; then
              git add "$file"
            fi
          done
          git config --global user.name ScreenshotBot
          git config --global user.email 41898282+github-actions[bot]@users.noreply.github.com
          git commit -m "Add screenshot diff"
          git push origin HEAD:"$COMPANION_BRANCH_NAME" -f

      - name: Generate diff reports
        id: generate-diff-reports
        if: steps.check-if-there-are-valid-files.outputs.exist_valid_files == 'true'
        shell: bash
        run: |
          # Find all the files ending with _compare.png in roborazzi folder
          files=$(find . -type f -name "*_compare.png" | grep "roborazzi/" | grep -E "^[a-zA-Z0-9_./-]+$")
          delimiter="$(openssl rand -hex 8)"
          {
            echo "reports<<${delimiter}"
          
            # Create markdown table header
            echo "Screenshot diff report vs base branch: ${{ github.event.workflow_run.event  == 'pull_request' && github.event.workflow_run.event.pull_request.base.ref || github.event.repository.default_branch }}"
            echo "| File name | Image |"
            echo "|-------|-------|"
          } >> "$GITHUB_OUTPUT"
          
          # Iterate over the files and create table rows
          for file in $files; do
            # Get the file name and insert newlines every 20 characters
            fileName=$(basename "$file" | sed -r 's/(.{20})/\1<br>/g')
            echo "| [$fileName](https://github.com/${{ github.repository }}/blob/$COMPANION_BRANCH_NAME/$file) | ![](https://github.com/${{ github.repository }}/blob/$COMPANION_BRANCH_NAME/$file?raw=true) |" >> "$GITHUB_OUTPUT"
          done
          echo "${delimiter}" >> "$GITHUB_OUTPUT"

      - name: Find Comment
        uses: peter-evans/find-comment@3eae4d37986fb5a8592848f6a574fdf654e61f9e # v3.1.0
        id: find-comment
        if: steps.generate-diff-reports.outputs.reports != ''
        with:
          issue-number: ${{  github.event.number }}
          comment-author: 'github-actions[bot]'
          body-includes: Screenshot diff report

      - name: Add or update comment on pull request
        uses: peter-evans/create-or-update-comment@71345be0265236311c031f5c7866368bd1eff043 # v4.0.0
        if: steps.generate-diff-reports.outputs.reports != ''
        with:
          comment-id: ${{ steps.find-comment.outputs.comment-id }}
          issue-number: ${{ github.event.number }}
          body: ${{ steps.generate-diff-reports.outputs.reports }}
          edit-mode: replace

  cleanup-outdated-companion-branches:
    name: Cleanup outdated companion branches
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Delete branch if it's older than 1 month
        run: |
          git branch -r --format="%(refname:lstrip=3)" | grep companion/ | while read -r branch; do
            last_commit_date_timestamp=$(git log -1 --format=%ct "origin/$branch")
            now_timestamp=$(date +%s)
            echo "branch: $branch now_timestamp: $now_timestamp last_commit_date_timestamp: $last_commit_date_timestamp"
            if [ $((now_timestamp - last_commit_date_timestamp)) -gt 2592000 ]; then
              echo "Deleting branch $branch"
              git push origin --delete "$branch"
            fi
          done
